#!/usr/bin/env node

// V30 Supabase Setup Script
// Run with: node setup-supabase.js

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log(`
🗄️  V30 AI Board - Supabase Setup
===============================

This script will help you configure your Supabase database for V30.

BEFORE RUNNING THIS SCRIPT:
1. Create a new Supabase project at https://supabase.com/dashboard
2. Name it "v30-ai-board" 
3. Run the schema in supabase-schema.sql in the SQL Editor
4. Have your Project URL and anon key ready

Let's get started!
`);

async function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function setupSupabase() {
  try {
    console.log('\n📋 Step 1: Supabase Project Information');
    console.log('----------------------------------------');
    
    const supabaseUrl = await askQuestion('Enter your Supabase Project URL (https://xxxxx.supabase.co): ');
    const supabaseKey = await askQuestion('Enter your Supabase anon public key: ');
    
    // Validate inputs
    if (!supabaseUrl.includes('supabase.co')) {
      throw new Error('Invalid Supabase URL format');
    }
    
    if (supabaseKey.length < 100) {
      throw new Error('Supabase key seems too short - make sure you copied the full key');
    }
    
    console.log('\n🤖 Step 2: AI Service Keys');
    console.log('---------------------------');
    console.log('You can reuse existing keys or create new ones for V30.');
    
    const anthropicKey = await askQuestion('Enter your Anthropic API key (or press Enter to skip): ');
    const openaiKey = await askQuestion('Enter your OpenAI API key (or press Enter to skip): ');
    const deepgramKey = await askQuestion('Enter your Deepgram API key for voice (or press Enter to skip): ');
    
    // Create .env content
    const envContent = `# V30 AI Board Environment Configuration
# Generated by setup-supabase.js on ${new Date().toISOString()}

# V30 Supabase Configuration
REACT_APP_SUPABASE_URL=${supabaseUrl}
REACT_APP_SUPABASE_ANON_KEY=${supabaseKey}

# AI Service Keys
${anthropicKey ? `REACT_APP_ANTHROPIC_API_KEY=${anthropicKey}` : '# REACT_APP_ANTHROPIC_API_KEY=your_claude_api_key'}
${openaiKey ? `REACT_APP_OPENAI_API_KEY=${openaiKey}` : '# REACT_APP_OPENAI_API_KEY=your_openai_key'}
REACT_APP_GOOGLE_API_KEY=your_gemini_key
REACT_APP_DEEPSEEK_API_KEY=your_deepseek_key

# Voice Services
${deepgramKey ? `REACT_APP_DEEPGRAM_API_KEY=${deepgramKey}` : '# REACT_APP_DEEPGRAM_API_KEY=your_deepgram_key'}
REACT_APP_ELEVENLABS_API_KEY=your_elevenlabs_key

# Environment Identification
REACT_APP_ENVIRONMENT=development
REACT_APP_VERSION=v30

# Feature Flags
REACT_APP_ENABLE_CLOUD_PERSISTENCE=true

# WebSocket (Optional - for real-time features)
REACT_APP_WS_URL=ws://localhost:3001
`;

    // Write .env file
    fs.writeFileSync('.env', envContent);
    console.log('\n✅ .env file created successfully!');
    
    // Create .env.local for development
    fs.writeFileSync('.env.local', envContent);
    console.log('✅ .env.local file created for development!');
    
    console.log(`
🎉 Supabase Setup Complete!
============================

✅ Database credentials configured
✅ Environment files created
✅ Cloud persistence enabled

NEXT STEPS:
-----------
1. Test your setup: npm start
2. Try signing up at http://localhost:3000
3. Upload a document and test AI chat
4. Deploy to Vercel with these environment variables

🚀 VERCEL DEPLOYMENT:
--------------------
Add these environment variables in your Vercel dashboard:

REACT_APP_SUPABASE_URL=${supabaseUrl}
REACT_APP_SUPABASE_ANON_KEY=${supabaseKey}
${anthropicKey ? `REACT_APP_ANTHROPIC_API_KEY=${anthropicKey}` : ''}
${openaiKey ? `REACT_APP_OPENAI_API_KEY=${openaiKey}` : ''}
REACT_APP_ENABLE_CLOUD_PERSISTENCE=true

Then run: vercel --prod

🔒 SECURITY NOTE:
Your .env files are gitignored and won't be committed.
Never commit API keys to version control!
`);
    
  } catch (error) {
    console.error('\n❌ Setup failed:', error.message);
    console.log('\nPlease check your inputs and try again.');
  } finally {
    rl.close();
  }
}

// Check if schema file exists
if (!fs.existsSync('supabase-schema.sql')) {
  console.log('❌ supabase-schema.sql not found. Make sure you\'re in the project root directory.');
  process.exit(1);
}

setupSupabase();